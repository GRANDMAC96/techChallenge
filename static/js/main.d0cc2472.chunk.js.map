{"version":3,"sources":["components/Header/Header.js","components/PlayerName/PlayerName.js","components/PlayerName/index.js","data/actions.js","components/PlayerList/PlayerList.js","components/PlayerList/index.js","components/Team/Team.js","components/Team/index.js","components/Reset/Reset.js","components/Reset/index.js","App.js","data/initial.js","data/reducers.js","data/store.js","index.js"],"names":["Header","text","className","PlayerName","props","handlePlayer","bind","handleSubmit","handleCreate","e","this","setPlayerName","currentTarget","value","preventDefault","handleAddition","playername","handleTeam","playerlist","type","placeholder","onChange","onClick","to","Component","connect","state","dispatch","player","data","players","team","PlayerList","Table","responsive","map","index","key","Team","teamA","teamB","Reset","resetTeams","App","Fragment","exact","path","initialState","teams","action","array","i","length","rand","Math","floor","random","temp","shuffle","teamAplayers","slice","teamBplayers","reducer","list","reset","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0cc2472.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ({ text }) => {\n    return (\n        <>\n            <header className=\"header\">\n                <h1 className=\"h1\">{text}</h1>\n            </header>\n        </>\n    )\n}\n\nexport default Header; ","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\n\n\n// import { saveSettings } from \"../../data/actions\";\n\n// winningScore, alternate, player1Name, player2Name\n// I'm setting up a class to control my local state of my settings form.\n\nclass PlayerName extends Component {\n    constructor(props) {\n        super(props);\n        this.handlePlayer = this.handlePlayer.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleCreate = this.handleCreate.bind(this);\n    }\n\n    handlePlayer(e) {\n        this.props.setPlayerName(e.currentTarget.value);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleAddition(this.props.playername);\n    }\n    handleCreate(e) {\n        e.preventDefault();\n        this.props.handleTeam(this.props.playerlist);\n    }\n    render() {\n        return (\n            <>\n                <form className=\"form\">\n                    <div>\n                        <label>Player Name</label>\n                        <input\n                            type=\"name\"\n                            placeholder=\"Enter name\"\n                            value={this.props.playername}\n                            onChange={this.handlePlayer}\n                        />\n                    </div>\n                </form>\n                <button\n                    onClick={this.handleSubmit}\n                    className=\"btn btn-danger button\">Add Player\n                </button>\n                <button\n                    onClick={this.handleCreate}\n                    className=\"btn btn-danger button\"\n                >\n                    <Link\n                        to=\"/teampage\"\n                        className=\"button\"\n                    >\n                        Create Team</Link>\n                </button>\n            </>\n        );\n    }\n}\n\nexport default PlayerName;","import { connect } from \"react-redux\";\nimport PlayerName from \"./PlayerName\";\nimport { player, list, team } from \"../../data/actions\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        playername: state.playername,\n        playerlist: state.playerlist,\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setPlayerName: (playername) => {\n            dispatch(player(playername));\n        },\n        handleAddition: (data) => {\n            dispatch(list(data));\n        },\n        handleTeam: (players) => {\n            dispatch(team(players));\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerName);\n\n","export const player = (playername) => {\n    return {\n        type: \"CHANGENAME\",\n        playername: playername\n    };\n};\nexport const list = (playername) => {\n    return {\n        type: \"ADDPLAYER\",\n        playername: playername\n    };\n};\nexport const team = (players) => {\n    return {\n        type: \"CREATETEAM\",\n        players: players,\n    };\n};\nexport const reset = () => {\n    return {\n        type: \"RESETTEAMS\",\n    };\n};","import React from \"react\";\nimport Table from 'react-bootstrap/Table';\n\n\nconst PlayerList = ({ playerlist, playername }) => {\n    return (\n        <>\n            <Table responsive>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                    </tr>\n                </thead>\n                <tbody>{\n                    playerlist.map((player, index) =>\n                        <tr key={index}>\n                            <td>{player.playername}</td>\n                        </tr>\n                    )}\n                </tbody>\n            </Table>\n        </>\n    )\n}\n\nexport default PlayerList; ","import { connect } from \"react-redux\";\nimport PlayerList from \"./PlayerList\";\n\nconst mapStateToProps = (state) => {\n    return {\n        playerlist: state.playerlist\n    }\n}\n\nexport default connect(mapStateToProps)(PlayerList);","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nconst Team = ({ teamA, teamB }) => {\n    return (\n        <>\n            <Table responsive>\n                <thead>\n                    <tr>\n                        <th>Team A</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        teamA.map((player, index) =>\n                            <tr key={index}>\n                                <td>{player.playername}</td>\n                            </tr>\n                        )}\n                </tbody>\n                <thead>\n                    <tr>\n                        <th>Team B</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        teamB.map((player, index) =>\n                            <tr key={index}>\n                                <td>{player.playername}</td>\n                            </tr>\n                        )}\n                </tbody>\n            </Table>\n        </>\n    )\n}\n\nexport default Team; ","import { connect } from \"react-redux\";\nimport Team from \"./Team\";\n\nconst mapStateToProps = (state) => {\n    return {\n        teamA: state.teamA,\n        teamB: state.teamB,\n    }\n}\n\nexport default connect(mapStateToProps)(Team);","import React from \"react\";\n\nconst Reset = ({ resetTeams }) => {\n    return (\n        <>\n            <button\n                className=\"btn btn-danger button\"\n                onClick={resetTeams}\n            >Reset</button>\n        </>\n    )\n}\n\nexport default Reset; ","import { connect } from \"react-redux\";\nimport Reset from \"./Reset\";\nimport { reset } from \"../../data/actions\";\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        resetTeams: () => dispatch(reset())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Reset); ","import React, { Fragment } from 'react';\nimport {\n  HashRouter as Router,\n  Route\n} from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport PlayerName from './components/PlayerName';\nimport PlayerList from './components/PlayerList';\nimport Team from './components/Team';\nimport Reset from './components/Reset';\n\nconst App = () => {\n  return (\n    <Router>\n      <React.Fragment>\n        <Route exact path=\"/\">\n          <Header text={\"Select Your Team\"} />\n          <PlayerName />\n          <PlayerList />\n          <Reset />\n        </Route>\n        <Route exact path=\"/teampage\">\n          <Header text={\"Teams\"} />\n          <Team />\n        </Route>\n      </React.Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n","const initialState = {\n    playername: \"\",\n    playerlist: [],\n    teamA: [],\n    teamB: [],\n};\n\nexport default initialState;","import initialState from \"./initial\";\n\nconst player = (state, action) => {\n    return {\n        ...state,\n        playername: action.playername,\n    }\n}\n\nconst list = (state, action) => {\n    return {\n        ...state,\n        playerlist: [\n            ...state.playerlist,\n            {\n                playername: action.playername\n            }\n        ],\n        playername: \"\",\n    };\n}\n\n//randomly shuffles an array efficiently\n\n\n// shuffle function, randomly shuffles an array efficiently, for use with the Create Team button\nconst shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i -= 1) {\n        let rand = Math.floor((i + 1) * Math.random()); //get random between zero and i (inclusive)\n        let temp = array[i];   //swap i and the random index\n        array[i] = array[rand];\n        array[rand] = temp;\n    }\n    return array;\n}\n\nconst teams = (state, action) => {\n    let players = shuffle(state.playerlist); //shuffle array\n\n    // separate the array back into the 2 teams\n    let teamAplayers = players.slice(0, (players.length / 2));\n    let teamBplayers = players.slice((players.length / 2));\n\n    return {\n        ...state,\n        teamA: teamAplayers,\n        teamB: teamBplayers,\n    }\n}\n\nconst reset = state => {\n    return {\n        ...state,\n        playername: \"\",\n        playerlist: [],\n        teamA: [],\n        teamB: [],\n    };\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"CHANGENAME\": return player(state, action);\n        case \"ADDPLAYER\": return list(state, action);\n        case \"CREATETEAM\": return teams(state, action);\n        case \"RESETTEAMS\": return reset(state);\n        default: return state;\n    }\n}\n\nexport default reducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport reducer from \"./reducers\";\nimport initialState from \"./initial\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(applyMiddleware())\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport \"../src/styles/main.css\";\nimport store from \"./data/store\";\n//  import initial from \"./data/initial\";\n// import reducers from \"./data/reducers\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}